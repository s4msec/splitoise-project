generator client {
  provider = "prisma-client-js"
  output   = "../generated/splitoise"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int       @id @default(autoincrement())
  name     String    @db.VarChar(100)
  password String    @db.VarChar(256)
  role     String    @db.VarChar(256)
  projects Project[]
}

model Project {
  id               Int                @id @default(autoincrement())
  uuid             String             @unique @db.VarChar(256)
  userId           Int
  name             String             @db.VarChar(100)
  description      String             @db.Text
  icon             String             @db.VarChar(256)
  user             User               @relation(fields: [userId], references: [id])
  Splitter         Splitter[]
  ProjectCountries ProjectCountries[]

  @@index([userId])
}

model ProjectCountries {
  id        Int     @id @default(autoincrement())
  projectId Int
  countryId Int
  pixelId   String  @db.VarChar(128)
  country   Country @relation(fields: [countryId], references: [id])
  project   Project @relation(fields: [projectId], references: [id])
}

model Category {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(100)
  description String     @db.VarChar(255)
  Splitter    Splitter[]
}

model Country {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(100)
  redirectMessage  String             @db.VarChar(255)
  icon             String?            @db.VarChar(255)
  ProjectCountries ProjectCountries[]
  Splitter         Splitter[]
}

model Splitter {
  id         Int       @id @default(autoincrement())
  uuid       String    @unique @db.VarChar(256)
  projectId  Int
  categoryId Int
  countryId  Int
  project    Project   @relation(fields: [projectId], references: [id])
  country    Country   @relation(fields: [countryId], references: [id])
  category   Category  @relation(fields: [categoryId], references: [id])
  Split      Split[]
}

model Split {
  id           Int      @id @default(autoincrement())
  redirectSlug String   @unique @db.VarChar(256)
  splitterId   Int
  splitter     Splitter @relation(fields: [splitterId], references: [id])
  links        Link[]
}

model Link {
  id          Int      @id @default(autoincrement())
  splitId     Int
  url         String   @db.VarChar(2048)
  type        Int
  prob        Float
  ecpm        Float
  hidden      Boolean  @default(false)

  linkType    LinkType @relation(fields: [type], references: [id])
  split       Split    @relation(fields: [splitId], references: [id])
}

model LinkType {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(100)

  links Link[]
}

model Log {
  id          Int      @id @default(autoincrement())
  type        String   @db.VarChar(100)
  description String   @db.VarChar(1000)
  createdAt   DateTime @default(now())
}